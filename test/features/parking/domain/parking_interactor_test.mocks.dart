// Mocks generated by Mockito 5.4.0 from annotations
// in parking_app/test/features/parking/domain/parking_interactor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parking_app/features/parking/data/models/parking.dart' as _i2;
import 'package:parking_app/features/parking/data/parking_repository.dart'
    as _i3;
import 'package:parking_app/features/vehicles/data/models/vehicle.dart' as _i6;
import 'package:parking_app/features/vehicles/data/vehicles_repository.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeParking_0 extends _i1.SmartFake implements _i2.Parking {
  _FakeParking_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ParkingRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockParkingRepository extends _i1.Mock implements _i3.ParkingRepository {
  MockParkingRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> save(
    _i2.Parking? parking, {
    DateTime? time,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [parking],
          {#time: time},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> update(
    _i2.Parking? parking, {
    DateTime? time,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [parking],
          {#time: time},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<_i2.Parking> getOngoingParking() => (super.noSuchMethod(
        Invocation.method(
          #getOngoingParking,
          [],
        ),
        returnValue: _i4.Future<_i2.Parking>.value(_FakeParking_0(
          this,
          Invocation.method(
            #getOngoingParking,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Parking>);
}

/// A class which mocks [VehiclesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehiclesRepository extends _i1.Mock
    implements _i5.VehiclesRepository {
  MockVehiclesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> saveVehicle(_i6.Vehicle? vehicle) => (super.noSuchMethod(
        Invocation.method(
          #saveVehicle,
          [vehicle],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> deleteVehicle(String? vehicleID) => (super.noSuchMethod(
        Invocation.method(
          #deleteVehicle,
          [vehicleID],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> updateVehicle({
    required String? vehicleID,
    String? name,
    String? registerNumber,
    bool? selected,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateVehicle,
          [],
          {
            #vehicleID: vehicleID,
            #name: name,
            #registerNumber: registerNumber,
            #selected: selected,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<List<_i6.Vehicle>> fetchVehiclesForUser() => (super.noSuchMethod(
        Invocation.method(
          #fetchVehiclesForUser,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Vehicle>>.value(<_i6.Vehicle>[]),
      ) as _i4.Future<List<_i6.Vehicle>>);
}
